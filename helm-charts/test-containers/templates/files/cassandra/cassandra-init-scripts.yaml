{{- if .Values.db.cassandra.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-init-scripts
data:
  init-db.sh: |
    #!/bin/bash
    set -e

    echo "Cassandra init-script started!"

    CASSANDRA_HOST="{{ .Values.db.cassandra.serviceName }}"
    CASSANDRA_USER="{{ .Values.db.cassandra.users.test.username }}"
    CASSANDRA_PASSWORD="{{ .Values.db.cassandra.users.test.password }}"
    KEYSPACE="{{ .Values.db.cassandra.keyspace }}"
    DATA_DIR="/tmp"

    CREATE_TEST_TABLES="{{ .Values.db.cassandra.init.testdb.create }}"

    apt update
    apt install -y curl

    # Download and process the TSV files
    {{- if .Values.db.cassandra.init.testdb.create }}
    {{- range .Values.db.cassandra.init.testdb.importFiles }}
    {{- if .import }}
      echo "Downloading {{ .name }} from {{ .url }}..."
      curl -L -o ${DATA_DIR}/{{ .name }} "{{ .url }}"

      cd ${DATA_DIR}
      echo "Extracting {{ .name }}..."
      gunzip ${DATA_DIR}/{{ .name }}

      FILE_PATH="${DATA_DIR}/{{ .name | replace ".gz" "" }}"

      echo "Creating {{ .name }} SQL script..."
      echo {{ .createScript |quote }}| sed 's/\\n/\n/g'| cqlsh -u $CASSANDRA_USER -p $CASSANDRA_PASSWORD
      echo "{{ trimSuffix "\n" .loadScript }}" | sed "s|\$FILE_PATH|${FILE_PATH}|g" | cqlsh -u $CASSANDRA_USER -p $CASSANDRA_PASSWORD
      #cqlsh -u cassandra -p cassandra -e "COPY test.title_ratings (tconst, averageRating, numVotes) FROM '/tmp/title.ratings.tsv' WITH DELIMITER='	' AND HEADER=TRUE AND NULL='\N';"

      if [ $? -ne 0 ]; then
      echo "Data import failed. Please check the logs for more details."
      exit 1
      fi

      ls -al /tmp
    {{- end }}
    {{- end }}
    {{- end }}

    echo "Cassandra init-script completed!"
    {{- end }}
