{{- if .Values.db.oracle.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: oracle-init-scripts
data:
  init-db.sh: |
    #!/bin/bash
    set -e

    # Define a function to handle errors (like a "catch" block)
        handle_sqlldr_error() {
        result_code=$?
      echo "SQL*Loader exit code: $result_code"
        if [ $result_code -eq 0 ]; then
        echo "SQL*Loader completed successfully."
        elif [ $result_code -eq 2 ]; then
        echo "SQL*Loader completed with warnings."
        elif [ $result_code -eq 3 ]; then
        echo "SQL*Loader encountered errors."
        elif [ $result_code -eq 4 ]; then
        echo "SQL*Loader encountered a fatal error."
        else
      echo "Unknown result code: $result_code"
        fi

        # Optionally display SQL*Loader log output for debugging
        if [ -f /tmp/sqlldr_output.log ]; then
        cat /tmp/sqlldr_output.log
        fi
        if [ -f /tmp/temp_name_basics.log ]; then
        cat /tmp/temp_name_basics.log
        fi

        exit $result_code  # Return the result code (if needed for further steps)
      }

    echo "Oracle init-script started!"
    echo "Waiting for Oracle to start..."

    ORACLE_HOST={{ .Values.db.oracle.serviceName }}
    ORACLE_PORT={{ .Values.db.oracle.port }}
    ORACLE_USER={{ .Values.db.oracle.users.test.username }}
    ORACLE_PASSWORD={{ .Values.db.oracle.users.test.password }}
    ORACLE_SERVICE={{ .Values.db.oracle.oracleServiceName}}
    #DATA_DIR="/opt/oracle/oradata"
    DATA_DIR="/tmp"

    #sqlplus TEST/12345@localhost:1521/FREEPDB1
    #sqlplus SYSTEM/12345@localhost:1521/FREEPDB1
    #sqlldr TEST/12345@localhost:1521/FREEPDB1 control=/tmp/temp_name_basics.ctl
    #CREATE OR REPLACE DIRECTORY ext_tab_dir AS '/opt/oracle/oradata';
    #GRANT READ, WRITE ON DIRECTORY ext_tab_dir TO TEST;

    until echo "exit" | sqlplus -S $ORACLE_USER/$ORACLE_PASSWORD@$ORACLE_HOST:$ORACLE_PORT/$ORACLE_SERVICE > /dev/null
    do
      echo "Waiting for Oracle..."
      sleep 2
    done

    echo "Oracle is ready!"

    # Download and process the TSV files
    {{- range .Values.db.oracle.init.testdb.importFiles }}
    {{- if .import }}
    echo "Downloading {{ .name }} from {{ .url }}..."
    curl -L -o ${DATA_DIR}/{{ .name }} "{{ .url }}"

    cd ${DATA_DIR}
    echo "Extracting {{ .name }}..."
    gunzip ${DATA_DIR}/{{ .name }}

    echo "Running {{ .name }} SQL script..."
    sqlplus $ORACLE_USER/$ORACLE_PASSWORD@$ORACLE_HOST:$ORACLE_PORT/$ORACLE_SERVICE <<EOF
    {{ .createScript | toYaml | nindent 8 }}
    EOF

    cat <<EOCONTROL > /tmp/temp_name_basics.ctl
    {{ .loadScript | toYaml | nindent 8 }}
    EOCONTROL
    ls -al /tmp
    {
      echo "Starting SQL*Loader..."
      sqlldr $ORACLE_USER/$ORACLE_PASSWORD@$ORACLE_HOST:$ORACLE_PORT/$ORACLE_SERVICE control=/tmp/temp_name_basics.ctl  rows=100000 errors=1000> /tmp/sqlldr_output.log 2>&1
    } || handle_sqlldr_error  # If the command fails, run the error handler


    # Clean up the temporary control file after execution
    #rm temp_name_basics.log
    #rm /tmp/temp_name_basics.ctl

    echo "Script {{ .name }} executed."
    {{- end }}
    {{- end }}

    echo "Oracle init-script completed!"
{{- end }}
