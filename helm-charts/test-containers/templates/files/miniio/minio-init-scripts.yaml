{{- if .Values.minio.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-init-scripts
data:
  init-minio.sh: |
    #!/bin/sh
    set -e

    echo "MinIO init script started!"

    # If MINIO_ACCESS_KEY is not provided, create it using MINIO_ROOT_USER
    if [ -z "$MINIO_ACCESS_KEY" ]; then
      echo "MINIO_ACCESS_KEY not set. Creating default access key based on MINIO_ROOT_USER..."
      export MINIO_ACCESS_KEY="$MINIO_ROOT_USER"
    fi

    # If MINIO_SECRET_KEY is not provided, create it using MINIO_ROOT_PASSWORD
    if [ -z "$MINIO_SECRET_KEY" ]; then
      echo "MINIO_SECRET_KEY not set. Creating default secret key based on MINIO_ROOT_PASSWORD..."
      export MINIO_SECRET_KEY="$MINIO_ROOT_PASSWORD"
    fi

    # Configure the MinIO client (mc) alias for the local server using the default (or provided) access keys.
    mc alias set local http://localhost:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY

    # Create the bucket for test data (ignore error if it already exists)
    mc mb local/testbucket || true

    # Get the dataset mount path from values (for example, "/datasets")
    MOUNT_PATH={{ .Values.datasets.mountPath }}
    # Optionally, get bucket name from values (default to "testbucket")
    BUCKET_NAME={{ .Values.minio.testBucketName }}

    echo "Checking for dataset files in $MOUNT_PATH..."

    if [ -d "$MOUNT_PATH" ]; then
      for FILE_PATH in "$MOUNT_PATH"/*; do
        if [ -f "$FILE_PATH" ]; then
          FILE_NAME=$(basename "$FILE_PATH")
          echo "Uploading $FILE_NAME to bucket $BUCKET_NAME..."
          mc cp "$FILE_PATH" local/$BUCKET_NAME
        else
          echo "Skipping non-regular file: $FILE_PATH"
        fi
      done
    else
      echo "Directory $MOUNT_PATH does not exist. No files to import."
    fi

    echo "MinIO init script completed!"
{{- end }}
