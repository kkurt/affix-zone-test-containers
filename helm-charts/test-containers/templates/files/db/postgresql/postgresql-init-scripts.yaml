{{- if .Values.db.postgresql.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init-scripts
data:
  init-db.sh: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "→ Tuning PostgreSQL for bulk load"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM SET synchronous_commit = off;"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM SET full_page_writes = off;"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM SET maintenance_work_mem = '512MB';"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM SET checkpoint_timeout = '30min';"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "SELECT pg_reload_conf();"

    echo "→ PostgreSQL init-script starting…"
    export PGPASSWORD={{ .Values.db.postgresql.users.root.password }}
    PGUSER={{ .Values.db.postgresql.users.root.username }}
    PGPORT={{ .Values.db.postgresql.port }}
    MASTER_DB=postgres
    DB_NAME={{ .Values.db.postgresql.testdb.name }}

    # 1) Create database if needed
    if psql -U "$PGUSER" -p "$PGPORT" -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
      echo "→ Database '$DB_NAME' already exists; skipping creation."
    else
      echo "→ Creating database '$DB_NAME'…"
      psql -U "$PGUSER" -p "$PGPORT" -d "$MASTER_DB" \
        -c "CREATE DATABASE \"$DB_NAME\" OWNER \"$PGUSER\";"
    fi

    # bring in Helm context
    {{- $root := . }}
    {{- $imports := default (list) $root.Values.db.postgresql.testdb.import }}
    {{- $mount := $root.Values.dataset.mountPath }}

    # 2) Drop old tables in reverse order
    {{- if gt (len $imports) 0 }}
    echo "→ Dropping existing tables…"
    {{- range $imp := reverse $imports }}
    echo "  • DROP TABLE IF EXISTS {{ $imp.tableName }} CASCADE"
    psql -U "$PGUSER" -p "$PGPORT" -d "$DB_NAME" \
      -c "DROP TABLE IF EXISTS {{ $imp.tableName }} CASCADE;"
    {{- end }}
    echo "  ✔ All old tables dropped."
    {{- end }}

    # 3) Create & load new tables
    {{- if gt (len $imports) 0 }}
    {{- range $imp := $imports }}
    FILE_PATH="{{ $mount }}/{{ $imp.fileName }}"
    if [ -s "$FILE_PATH" ]; then
      echo "→ processing '{{ $imp.fileName }}' for table '{{ $imp.tableName }}' from $FILE_PATH"

      {{- $ctx := dict "tableName" $imp.tableName "fileName" $imp.fileName "Values" $root.Values }}
      echo "  • creating table '{{ $imp.tableName }}'…"
      psql -U "$PGUSER" -p "$PGPORT" -d "$DB_NAME" \
        -c "{{ tpl $imp.createScript $ctx | replace "\n" " " | trim }}"

      echo "  • loading data into '{{ $imp.tableName }}'…"
      psql -U "$PGUSER" -p "$PGPORT" -d "$DB_NAME" \
        -c "{{ tpl $imp.loadScript  $ctx | replace "\n" " " | trim }}"

      echo "  ✔ import for '{{ $imp.tableName }}' completed."
    else
      echo "→ skipping '{{ $imp.fileName }}' (file not found or empty)"
    fi

    {{- end }}
    {{- else }}
    echo "→ No import entries defined; skipping data import."
    {{- end }}

    echo "→ Restoring original settings"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM RESET synchronous_commit;"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM RESET full_page_writes;"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM RESET maintenance_work_mem;"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "ALTER SYSTEM RESET checkpoint_timeout;"
    psql -h "$PGHOST" -U "$PGUSER" -d "$DB_NAME" -c "SELECT pg_reload_conf();"

    echo "→ PostgreSQL init-script finished."
{{- end }}
