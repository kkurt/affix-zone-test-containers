# templates/oracle-init-scripts.yaml
{{- if .Values.db.oracle.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: oracle-init-scripts
  namespace: {{ .Values.namespace }}
data:
  init-db.sh: |
    #!/bin/bash
    set -euo pipefail


     handle_sqlldr_error() {
      result_code=$?
      echo "SQL*Loader exit code: $result_code"
      if [ $result_code -eq 0 ]; then
        echo "SQL*Loader completed successfully."
      elif [ $result_code -eq 2 ]; then
        echo "SQL*Loader completed with warnings. Continuing."
      else
        echo "SQL*Loader encountered errors (exit code $result_code). Exiting."
        [ -f $TEMP_DIR/sqlldr_output.log ] && cat $TEMP_DIR/sqlldr_output.log
        [ -f $TEMP_DIR/temp_name_basics.ctl ] && cat $TEMP_DIR/temp_name_basics.ctl
        exit $result_code
      fi
    }


    echo "→ Oracle init-script starting…"

    # Connection parameters
    ORA_HOST={{ .Values.db.oracle.serviceName }}
    ORA_PORT={{ .Values.db.oracle.port }}
    ORA_SVC={{ .Values.db.oracle.oracleServiceName }}
    ORA_USER={{ .Values.db.oracle.users.test.username }}
    ORA_PWD={{ .Values.db.oracle.users.test.password }}
    CONN_STR="${ORA_USER}/${ORA_PWD}@//${ORA_HOST}:${ORA_PORT}/${ORA_SVC}"

    DATASET="{{ .Values.dataset.mountPath }}"
    TEMP_DIR="/tmp"

    # Wait until Oracle is available (retry up to MAX_RETRIES).
    RETRIES=0
    MAX_RETRIES=12
    until echo "exit" | sqlplus -S "$CONN_STR" > /dev/null 2>&1; do
      RETRIES=$((RETRIES+1))
      if [ "$RETRIES" -ge "$MAX_RETRIES" ]; then
        echo "Oracle did not become available in time."
        exit 1
      fi
      echo "Waiting for Oracle... attempt ${RETRIES}/${MAX_RETRIES}"
      sleep 1
    done

    # 2) schema creation skipped (assumes PDB already exists)
    {{- if .Values.db.oracle.testdb.create }}
    echo "→ Schema '{{ .Values.db.oracle.testdb.name }}' assumed present; skipping creation."
    {{- end }}

    # 3) collect import list
    {{- $root := . }}
    {{- $imports := default (list) $root.Values.db.oracle.testdb.import }}

    # 4) drop tables in reverse order (ignore if not exists)
    {{- if gt (len $imports) 0 }}
    echo "→ Dropping existing tables…"
    {{- range $imp := reverse $imports }}
    echo "  • attempting DROP TABLE {{ $imp.name }}…"
    echo exit | sqlplus -S "$CONN_STR" <<-EOSQL
      BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE {{ $imp.name }} CASCADE CONSTRAINTS';
      EXCEPTION
        WHEN OTHERS THEN
          IF SQLCODE != -942 THEN RAISE; END IF;
      END;
      /
    EOSQL
    {{- end }}
    echo "✔ All old tables dropped."
    {{- end }}

    # 5) loop imports & load
    {{- range $imp := $imports }}
      {{- /* determine row count from dataset.files */}}
      {{- $count := 0 }}
      {{- range $f := $root.Values.dataset.files }}
        {{- if eq $f.name $imp.name }}{{- $count = $f.dataSize | int }}{{- end }}
      {{- end }}
      {{- if gt $count 0 }}
    echo "→ Importing '{{ $imp.name }}' ({{ $count }} rows)…"

    # 5a) Create table
    echo exit | sqlplus -S "$CONN_STR" <<-EOSQL
{{ tpl $imp.createScript $root | indent 6 }}
    EOSQL

    # 5b) Write SQL*Loader control file
    cat <<-EOCONTROL > "$TEMP_DIR"/{{ $imp.name }}.ctl
{{ tpl $imp.loadScript $root | indent 6 }}
    EOCONTROL

    echo "  • Running SQL*Loader for '{{ $imp.name }}'…"
    sqlldr "$CONN_STR" direct=true skip=1 control="$TEMP_DIR"/{{ $imp.name }}.ctl \
      rows=100000 errors=1000 log="$TEMP_DIR"/{{ $imp.name }}.log || handle_sqlldr_error

    echo "  ✔ '{{ $imp.name }}' imported."
      {{- else }}
    echo "→ Skipping '{{ $imp.name }}' (0 rows)"
      {{- end }}
    {{- end }}

    echo "→ Oracle init-script finished."
    rm /tmp/*
{{- end }}
