{{- if .Values.db.oracle.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: oracle-init-scripts
data:
  init-db.sh: |
    #!/bin/bash
    set -e

    # Define an error handler function for SQL*Loader
    handle_sqlldr_error() {
      result_code=$?
      echo "SQL*Loader exit code: $result_code"
      if [ $result_code -eq 0 ]; then
        echo "SQL*Loader completed successfully."
      elif [ $result_code -eq 2 ]; then
        echo "SQL*Loader completed with warnings."
      elif [ $result_code -eq 3 ]; then
        echo "SQL*Loader encountered errors."
      elif [ $result_code -eq 4 ]; then
        echo "SQL*Loader encountered a fatal error."
      else
        echo "Unknown result code: $result_code"
      fi

      # Optionally show SQL*Loader log outputs for debugging
      [ -f /tmp/sqlldr_output.log ] && cat /tmp/sqlldr_output.log
      [ -f /tmp/temp_name_basics.ctl ] && cat /tmp/temp_name_basics.ctl

      exit $result_code
    }

    echo "Oracle init-script started!"
    echo "Waiting for Oracle to start..."

    ORACLE_HOST={{ .Values.db.oracle.serviceName }}
    ORACLE_PORT={{ .Values.db.oracle.port }}
    ORACLE_USER={{ .Values.db.oracle.users.test.username }}
    ORACLE_PASSWORD={{ .Values.db.oracle.users.test.password }}
    ORACLE_SERVICE={{ .Values.db.oracle.oracleServiceName }}
    # Use the datasets mount path as the working directory (pre-loaded via PVC)
    DATA_DIR="{{ .Values.datasets.mountPath }}"

    # Wait until Oracle is available
    until echo "exit" | sqlplus -S ${ORACLE_USER}/${ORACLE_PASSWORD}@${ORACLE_HOST}:${ORACLE_PORT}/${ORACLE_SERVICE} > /dev/null
    do
      echo "Waiting for Oracle..."
      sleep 2
    done

    echo "Oracle is ready!"

    {{- if .Values.db.oracle.init.testdb.create }}
    # Loop through each import file defined for Oracle
    {{- range .Values.db.oracle.init.testdb.importFiles }}
    echo "Running SQL script for {{ .name }}..."
    sqlplus ${ORACLE_USER}/${ORACLE_PASSWORD}@${ORACLE_HOST}:${ORACLE_PORT}/${ORACLE_SERVICE} <<EOF
    {{ .createScript | toYaml | nindent 4 }}
    EOF

    # Write the load control file
    cat <<EOCONTROL > /tmp/temp_name_basics.ctl
      {{ .loadScript | toYaml | nindent 4 }}
    EOCONTROL

    echo "Starting SQL*Loader for {{ .name }}..."
    sqlldr ${ORACLE_USER}/${ORACLE_PASSWORD}@${ORACLE_HOST}:${ORACLE_PORT}/${ORACLE_SERVICE} control=/tmp/temp_name_basics.ctl rows=100000 errors=1000 > /tmp/sqlldr_output.log 2>&1 || handle_sqlldr_error

    echo "Import for {{ .name }} completed."
      {{- end }}
      {{- end }}

    echo "Oracle init-script completed!"
{{- end }}
