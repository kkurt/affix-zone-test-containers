{{- if .Values.db.cassandra.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: cassandra-init-scripts
data:
  init-db.sh: |
    #!/bin/bash
    set -e

    echo "Cassandra init-script started!"

    # Cassandra settings
    CASSANDRA_HOST="{{ .Values.db.cassandra.serviceName }}"
    CASSANDRA_USER="{{ .Values.db.cassandra.users.test.username }}"
    CASSANDRA_PASSWORD="{{ .Values.db.cassandra.users.test.password }}"
    KEYSPACE="{{ .Values.db.cassandra.keyspace }}"
    # Use the datasets mount path defined in your values.yaml (the shared PVC path)
    DATA_DIR="{{ .Values.datasets.mountPath }}"

    # Optionally install curl
    apt update && apt install -y curl

    # Capture the global context so that tpl can access values outside the range loop.
    {{- $root := . -}}

    {{- if .Values.db.cassandra.init.testdb.create }}
      {{- range .Values.db.cassandra.init.testdb.importFiles }}
        echo "Processing file {{ .name }}..."
        # Construct the full file path (assuming the file was extracted to DATA_DIR)
        FILE_PATH="${DATA_DIR}/{{ .name }}"
        if [ -f "$FILE_PATH" ]; then
          echo "File $FILE_PATH exists. Proceeding with import for {{ .name }}."

          echo "Executing create CQL script for {{ .name }}..."
          # Evaluate the create script using tpl so that placeholders  are substituted
          echo "{{ tpl .createScript $root | nindent 4 }}" | sed 's/\\n/\n/g' | cqlsh -u ${CASSANDRA_USER} -p ${CASSANDRA_PASSWORD}

          echo "Executing load CQL script for {{ .name }}..."
          # Evaluate the load script and substitute $FILE_PATH with the actual file path.
          echo "{{ tpl .loadScript $root | nindent 4 }}" | sed "s|\$FILE_PATH|${FILE_PATH}|g" | cqlsh -u ${CASSANDRA_USER} -p ${CASSANDRA_PASSWORD}

          if [ $? -ne 0 ]; then
            echo "Data import for {{ .name }} failed. Exiting."
            exit 1
          fi

          ls -al ${DATA_DIR}
        else
          echo "File $FILE_PATH does not exist. Skipping import for {{ .name }}."
        fi
      {{- end }}
    {{- end }}

    echo "Cassandra init-script completed!"
{{- end }}
