namespace: "affixzone-test-containers"
testPvc: false
dataset:
  mountPath: "/datasets"
  pvcName: "dataset-pvc"
  files:
    - name: customer
      dataSize: 100
    - name: customer_tran
      dataSize: 100
db:
  postgresql:
    install: false
    serviceName: "postgresql-service"
    port: "5432"
    users:
      root:
        username: "postgres"
        password: "1234"
      test:
        username: "test"
        password: "1234"
    testdb:
      name: "test"
      create: true
      import:
        - name: customer
          createScript: |            
            CREATE TABLE {{ .name }} (
              CustomerId       UUID        PRIMARY KEY,
              CreateDate       DATE        NOT NULL,
              FirstName        TEXT,
              LastName         TEXT,
              Email            TEXT        UNIQUE,
              PhoneNumber      TEXT,
              Address          TEXT,
              City             TEXT,
              Country          TEXT,
              DateOfBirth      DATE,
              IsActive         BOOLEAN,
              CustomerType     TEXT,
              LastUpdateDate   TIMESTAMP,
              Notes            TEXT
            );
          loadScript: |
            \copy customer
              FROM '{{ .Values.dataset.mountPath }}/{{ .name }}.csv'
              WITH (FORMAT csv, HEADER true);
        - name: customer_tran
          createScript: |            
            CREATE TABLE {{ .name }} (
              TransactionId    UUID        PRIMARY KEY,
              CustomerId       UUID        REFERENCES customer(CustomerId),
              Amount           NUMERIC,
              TransactionDate  TIMESTAMP
            );
          loadScript: |
            \copy customer_tran
              FROM '{{ .Values.dataset.mountPath }}/{{ .name }}.csv'
              WITH (FORMAT csv, HEADER true);

  oracle:
    install: true                    # turn on Oracle support
    serviceName: "oracle-service"
    port: "1521"
    oracleServiceName: "FREEPDB1"
    users:
      root:
        username: "SYSTEM"
        password: "12345"
      test:
        username: "TEST"
        password: "12345"
    testdb:
      name: "TEST"
      create: true
      import:
        - name: customer
          createScript: |
            CREATE TABLE customer (
              CustomerId       VARCHAR2(36) PRIMARY KEY,
              CreateDate       DATE          NOT NULL,
              FirstName        VARCHAR2(50),
              LastName         VARCHAR2(50),
              Email            VARCHAR2(100),
              PhoneNumber      VARCHAR2(50),
              Address          VARCHAR2(200),
              City             VARCHAR2(50),
              Country          VARCHAR2(50),
              DateOfBirth      DATE,
              IsActive         NUMBER(1)      DEFAULT 1
                                 CONSTRAINT chk_customer_isactive
                                   CHECK (IsActive IN (0,1)),
              CustomerType     VARCHAR2(20),
              LastUpdateDate   TIMESTAMP,
              Notes            VARCHAR2(4000)
            );
          loadScript: |
            LOAD DATA
            INFILE '{{ .Values.dataset.mountPath }}/customer.csv'
            APPEND
            INTO TABLE customer
            FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
            ( CustomerId         CHAR(36),
              CreateDate         CHAR(10)   "TO_DATE(:CreateDate,'YYYY-MM-DD')",
              FirstName          CHAR,
              LastName           CHAR,
              Email              CHAR,
              PhoneNumber        CHAR,
              Address            CHAR,
              City               CHAR,
              Country            CHAR,
              DateOfBirth        CHAR(10)   "TO_DATE(:DateOfBirth,'YYYY-MM-DD')",
              IsActive         CHAR(5)    "DECODE(LOWER(:IsActive),'true',1,'false',0,0)",
              CustomerType       CHAR,
              LastUpdateDate     CHAR(19)   "TO_TIMESTAMP(:LastUpdateDate,'YYYY-MM-DD\"T\"HH24:MI:SS')",
              Notes              CHAR
            )

        - name: customer_tran
          createScript: |
            CREATE TABLE customer_tran (
              TransactionId    VARCHAR2(36) PRIMARY KEY,
              CustomerId       VARCHAR2(36) REFERENCES customer(CustomerId),
              Amount           NUMBER(15,2),
              TransactionDate  TIMESTAMP
            );
          loadScript: |
            LOAD DATA
            INFILE '{{ .Values.dataset.mountPath }}/customer_tran.csv'
            APPEND
            INTO TABLE customer_tran
            FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
            ( TransactionId     CHAR(36),
              CustomerId        CHAR(36),
              Amount            CHAR        "TO_NUMBER(:Amount)",
                   TransactionDate   CHAR        "TO_TIMESTAMP(:TransactionDate,'YYYY-MM-DD\"T\"HH24:MI:SS')"
            )
  cassandra:
    install: false
    serviceName: "cassandra-service"
    port: "9042"
    keyspace: "test"   # Note: this value now resides at .Values.db.cassandra.keyspace
    users:
      test:
        username: "cassandra"
        password: "cassandra"
    init:
      testdb:
        create: true
        importFiles:
          - name: title.ratings.tsv
            createScript: |
              CREATE KEYSPACE IF NOT EXISTS {{ .Values.db.cassandra.keyspace }}
              WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
              USE {{ .Values.db.cassandra.keyspace }};
              CREATE TABLE IF NOT EXISTS title_ratings (
                tconst TEXT PRIMARY KEY,
                averageRating FLOAT,
                numVotes INT
              );
            loadScript: |
              COPY {{ .Values.db.cassandra.keyspace }}.title_ratings (tconst, averageRating, numVotes) 
              FROM '$FILE_PATH' WITH DELIMITER='	' AND HEADER=TRUE AND NULL='N';
          - name: name.basics.tsv
            createScript: |
              CREATE KEYSPACE IF NOT EXISTS {{ .Values.db.cassandra.keyspace }}
              WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
              USE {{ .Values.db.cassandra.keyspace }};
              CREATE TABLE IF NOT EXISTS name_basics (
                nconst TEXT PRIMARY KEY,
                primaryName TEXT,
                birthYear TEXT,
                deathYear TEXT,
                primaryProfession TEXT,
                knownForTitles TEXT
              );
            loadScript: |
              COPY {{ .Values.db.cassandra.keyspace }}.name_basics (nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles)  
              FROM '$FILE_PATH' WITH DELIMITER='	' AND HEADER=TRUE AND NULL='\N';

          - name: BankCustomerTransaction
            createScript: |
              CREATE KEYSPACE IF NOT EXISTS {{ .Values.db.cassandra.keyspace }}
              WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
              USE {{ .Values.db.cassandra.keyspace }};
              CREATE TABLE IF NOT EXISTS bank_customer_transaction (
                id UUID PRIMARY KEY,
                customer_name TEXT,
                account_number TEXT,
                transaction_date DATE,
                transaction_amount DOUBLE,
                transaction_type TEXT
              );
            loadScript: |
              COPY {{ .Values.db.cassandra.keyspace }}.bank_customer_transaction (id, customer_name, account_number, transaction_date, transaction_amount, transaction_type)
              FROM '$FILE_PATH' WITH DELIMITER=',' AND HEADER=TRUE AND NULL='';

kafka:
  install: false
  installUI: true
  numMessages: 10000
  serviceName: "kafka-service"
  port: 9092
  image: "bitnami/kafka:3.9.0"
  users:
    test:
      username: "kafka"
      password: "kafka"
  init: true
minio:
  install: false
  serviceName: "minio-service"
  port: 9000   # Default MinIO port, update if necessary
  testBucketName: "testbucket"
  users:
    default:
      username: "minioadmin"
      password: "minioadmin"
  init:
    testdata:
      importFiles:
        - name: name.basics.tsv
          bucket: |
            {{ .Values.minio.testBucketName }}
        - name: title.ratings.tsv
          bucket: |
            {{ .Values.minio.testBucketName }}
        - name: BankCustomerTransaction
          bucket: |
            {{ .Values.minio.testBucketName }}
superset:
    install: false
iceberg:
  install: false
  serviceName: "iceberg-service"
  port: 8181
  users:
    default:
      username: "iceberg"
      password: "test123"
  init:
    create: true
hudi:
  install: false