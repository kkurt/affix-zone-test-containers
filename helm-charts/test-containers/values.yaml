namespace: "affixzone-test-containers"
testPvc: false
dataset:
  mountPath: "/datasets"
  pvcName: "dataset-pvc"
  files:
    - name: customer
      dataSize: 100
    - name: customer_tran
      dataSize: 100
db:
  postgresql:
    install: true
    serviceName: "postgresql-service"
    port: "5432"
    users:
      root:
        username: "postgres"
        password: "1234"
      test:
        username: "test"
        password: "1234"
    testdb:
      name: "test"
      create: true
      import:
        - name: customer
          createScript: |            
            CREATE TABLE {{ .name }} (
              CustomerId       UUID        PRIMARY KEY,
              CreateDate       DATE        NOT NULL,
              FirstName        TEXT,
              LastName         TEXT,
              Email            TEXT        UNIQUE,
              PhoneNumber      TEXT,
              Address          TEXT,
              City             TEXT,
              Country          TEXT,
              DateOfBirth      DATE,
              IsActive         BOOLEAN,
              CustomerType     TEXT,
              LastUpdateDate   TIMESTAMP,
              Notes            TEXT
            );
          loadScript: |
            \copy customer
              FROM '{{ .Values.dataset.mountPath }}/{{ .name }}.csv'
              WITH (FORMAT csv, HEADER true);
        - name: customer_tran
          createScript: |            
            CREATE TABLE {{ .name }} (
              TransactionId    UUID        PRIMARY KEY,
              CustomerId       UUID        REFERENCES customer(CustomerId),
              Amount           NUMERIC,
              TransactionDate  TIMESTAMP
            );
          loadScript: |
            \copy customer_tran
              FROM '{{ .Values.dataset.mountPath }}/{{ .name }}.csv'
              WITH (FORMAT csv, HEADER true);
  oracle:
    install: false
    serviceName: "oracle-service"
    port: "1521"
    oracleServiceName: "FREEPDB1"
    users:
      root:
        username: "SYSTEM"
        password: "12345"
      test:
        username: "TEST"
        password: "12345"
    init:
      testdb:
        create: true
        importFiles :
          - name: name.basics.tsv
            createScript:
              CREATE TABLE name_basics (
              nconst VARCHAR2(20) PRIMARY KEY,
              primaryName VARCHAR2(200),
              birthYear VARCHAR2(10),
              deathYear VARCHAR2(10),
              primaryProfession VARCHAR2(400),
              knownForTitles VARCHAR2(400)
              );
            loadScript: |
              LOAD DATA INFILE '{{ .Values.datasets.mountPath }}/name.basics.tsv'
              INTO TABLE name_basics
              FIELDS TERMINATED BY '\t'
              TRAILING NULLCOLS
              (
              nconst CHAR(20),
              primaryName CHAR(200),
              birthYear CHAR(10),
              deathYear CHAR(10),
              primaryProfession CHAR(400),
              knownForTitles CHAR(400)
              )
          - name: title.ratings.tsv
            createScript:
              CREATE TABLE title_ratings (
                tconst VARCHAR2(20) PRIMARY KEY,
                averageRating NUMERIC,
                numVotes INT
              );
            loadScript: |
              LOAD DATA INFILE '{{ .Values.datasets.mountPath }}/title.ratings.tsv'
              INTO TABLE title_ratings
              FIELDS TERMINATED BY '\t'
              TRAILING NULLCOLS
              (
                tconst CHAR(20),
                averageRating DECIMAL(3,1),
                numVotes INTEGER
              )
          - name: BankCustomerTransaction
            createScript: |
              CREATE TABLE bank_customer_transaction (
                id NUMBER PRIMARY KEY,
                customer_name VARCHAR2(200),
                account_number VARCHAR2(50),
                transaction_date DATE,
                transaction_amount NUMBER,
                transaction_type VARCHAR2(100)
              );
            loadScript: |
              LOAD DATA INFILE '{{ .Values.datasets.mountPath }}/BankCustomerTransaction.csv'
              INTO TABLE bank_customer_transaction
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              TRAILING NULLCOLS
              (
                id,
                customer_name,
                account_number,
                transaction_date "TO_DATE(:transaction_date, 'YYYY-MM-DD')",
                transaction_amount,
                transaction_type
              )

  cassandra:
    install: false
    serviceName: "cassandra-service"
    port: "9042"
    keyspace: "test"   # Note: this value now resides at .Values.db.cassandra.keyspace
    users:
      test:
        username: "cassandra"
        password: "cassandra"
    init:
      testdb:
        create: true
        importFiles:
          - name: title.ratings.tsv
            createScript: |
              CREATE KEYSPACE IF NOT EXISTS {{ .Values.db.cassandra.keyspace }}
              WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
              USE {{ .Values.db.cassandra.keyspace }};
              CREATE TABLE IF NOT EXISTS title_ratings (
                tconst TEXT PRIMARY KEY,
                averageRating FLOAT,
                numVotes INT
              );
            loadScript: |
              COPY {{ .Values.db.cassandra.keyspace }}.title_ratings (tconst, averageRating, numVotes) 
              FROM '$FILE_PATH' WITH DELIMITER='	' AND HEADER=TRUE AND NULL='N';
          - name: name.basics.tsv
            createScript: |
              CREATE KEYSPACE IF NOT EXISTS {{ .Values.db.cassandra.keyspace }}
              WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
              USE {{ .Values.db.cassandra.keyspace }};
              CREATE TABLE IF NOT EXISTS name_basics (
                nconst TEXT PRIMARY KEY,
                primaryName TEXT,
                birthYear TEXT,
                deathYear TEXT,
                primaryProfession TEXT,
                knownForTitles TEXT
              );
            loadScript: |
              COPY {{ .Values.db.cassandra.keyspace }}.name_basics (nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles)  
              FROM '$FILE_PATH' WITH DELIMITER='	' AND HEADER=TRUE AND NULL='\N';

          - name: BankCustomerTransaction
            createScript: |
              CREATE KEYSPACE IF NOT EXISTS {{ .Values.db.cassandra.keyspace }}
              WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
              USE {{ .Values.db.cassandra.keyspace }};
              CREATE TABLE IF NOT EXISTS bank_customer_transaction (
                id UUID PRIMARY KEY,
                customer_name TEXT,
                account_number TEXT,
                transaction_date DATE,
                transaction_amount DOUBLE,
                transaction_type TEXT
              );
            loadScript: |
              COPY {{ .Values.db.cassandra.keyspace }}.bank_customer_transaction (id, customer_name, account_number, transaction_date, transaction_amount, transaction_type)
              FROM '$FILE_PATH' WITH DELIMITER=',' AND HEADER=TRUE AND NULL='';

kafka:
  install: false
  installUI: true
  numMessages: 10000
  serviceName: "kafka-service"
  port: 9092
  image: "bitnami/kafka:3.9.0"
  users:
    test:
      username: "kafka"
      password: "kafka"
  init: true
minio:
  install: false
  serviceName: "minio-service"
  port: 9000   # Default MinIO port, update if necessary
  testBucketName: "testbucket"
  users:
    default:
      username: "minioadmin"
      password: "minioadmin"
  init:
    testdata:
      importFiles:
        - name: name.basics.tsv
          bucket: |
            {{ .Values.minio.testBucketName }}
        - name: title.ratings.tsv
          bucket: |
            {{ .Values.minio.testBucketName }}
        - name: BankCustomerTransaction
          bucket: |
            {{ .Values.minio.testBucketName }}
superset:
    install: false
iceberg:
  install: false
  serviceName: "iceberg-service"
  port: 8181
  users:
    default:
      username: "iceberg"
      password: "test123"
  init:
    create: true
hudi:
  install: false