namespace: "affixzone-test-containers"
dataset:
  mountPath: "/datasets"
  pvcName: "dataset-pvc"
  loadParallelism: 16
db:
  postgresql:
    install: true
    serviceName: "postgresql-service"
    port: "5432"
    users:
      root:
        username: "postgres"
        password: "1234"
      test:
        username: "test"
        password: "1234"
    testdb:
      name: "test"
      create: true
      import:
        - tableName: customer_100k
          fileName: "customer_100k.csv"
          createScript: |
            CREATE TABLE {{ .tableName }} (
              customer_id       UUID        PRIMARY KEY,
              create_date       DATE        NOT NULL,
              first_name        TEXT,
              last_name         TEXT,
              rmail            TEXT        UNIQUE,
              phone_number      TEXT,
              address          TEXT,
              city             TEXT,
              country          TEXT,
              date_of_birth      DATE,
              active         BOOLEAN,
              customer_type     TEXT,
              lastU_update_date   TIMESTAMP,
              notes            TEXT
            );
          loadScript: |
            \copy {{ .tableName }}
              FROM '{{ .Values.dataset.mountPath }}/{{ .fileName }}'
              WITH (FORMAT csv, HEADER true);
        - tableName: customer_tran_1m
          fileName: "customer_tran_1m.csv"
          createScript: |            
            CREATE TABLE {{ .tableName }} (
              transaction_id    UUID        PRIMARY KEY,
              customer_id       UUID        REFERENCES customer_100k(customer_id),
              amount           NUMERIC,
              transaction_date  TIMESTAMP
            );
          loadScript: |
            \copy {{ .tableName }}
              FROM '{{ .Values.dataset.mountPath }}/{{ .fileName }}'
              WITH (FORMAT csv, HEADER true);

  oracle:
    install: false                    # turn on Oracle support
    serviceName: "oracle-service"
    port: "1521"
    oracleServiceName: "FREEPDB1"
    users:
      root:
        username: "SYSTEM"
        password: "12345"
      test:
        username: "TEST"
        password: "12345"
    testdb:
      name: "TEST"
      create: true
      import:
        - name: customer
          createScript: |
            CREATE TABLE customer (
              CustomerId       VARCHAR2(36) PRIMARY KEY,
              CreateDate       DATE          NOT NULL,
              FirstName        VARCHAR2(50),
              LastName         VARCHAR2(50),
              Email            VARCHAR2(100),
              PhoneNumber      VARCHAR2(50),
              Address          VARCHAR2(200),
              City             VARCHAR2(50),
              Country          VARCHAR2(50),
              DateOfBirth      DATE,
              IsActive         NUMBER(1)      DEFAULT 1
                                 CONSTRAINT chk_customer_isactive
                                   CHECK (IsActive IN (0,1)),
              CustomerType     VARCHAR2(20),
              LastUpdateDate   TIMESTAMP,
              Notes            VARCHAR2(4000)
            );
          loadScript: |
            LOAD DATA
            INFILE '{{ .Values.dataset.mountPath }}/customer10k.csv'
            APPEND
            INTO TABLE customer
            FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
            ( CustomerId         CHAR(36),
              CreateDate         CHAR(10)   "TO_DATE(:CreateDate,'YYYY-MM-DD')",
              FirstName          CHAR,
              LastName           CHAR,
              Email              CHAR,
              PhoneNumber        CHAR,
              Address            CHAR,
              City               CHAR,
              Country            CHAR,
              DateOfBirth        CHAR(10)   "TO_DATE(:DateOfBirth,'YYYY-MM-DD')",
              IsActive         CHAR(5)    "DECODE(LOWER(:IsActive),'true',1,'false',0,0)",
              CustomerType       CHAR,
              LastUpdateDate     CHAR(19)   "TO_TIMESTAMP(:LastUpdateDate,'YYYY-MM-DD\"T\"HH24:MI:SS')",
              Notes              CHAR
            )

        - name: customer_tran
          createScript: |
            CREATE TABLE customer_tran (
              TransactionId    VARCHAR2(36) PRIMARY KEY,
              CustomerId       VARCHAR2(36) REFERENCES customer(CustomerId),
              Amount           NUMBER(15,2),
              TransactionDate  TIMESTAMP
            );
          loadScript: |
            LOAD DATA
            INFILE '{{ .Values.dataset.mountPath }}/customer_tran100m.csv'
            APPEND
            INTO TABLE customer_tran
            FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
            ( TransactionId     CHAR(36),
              CustomerId        CHAR(36),
              Amount            CHAR        "TO_NUMBER(:Amount)",
                   TransactionDate   CHAR        "TO_TIMESTAMP(:TransactionDate,'YYYY-MM-DD\"T\"HH24:MI:SS')"
            )
cassandra:
  install: false                     # turn on Cassandra support
  serviceName: "cassandra-service"
  port: "9042"
  keyspace: "test"
  users:
    test:
      username: "cassandra"
      password: "cassandra"
  testdb:
    create: true
    import:
      - name: customer
        createScript: |          
          CREATE KEYSPACE IF NOT EXISTS {{ .Values.cassandra.keyspace }}
            WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
          CREATE TABLE IF NOT EXISTS {{ .Values.cassandra.keyspace }}.customer (
            CustomerId       uuid        PRIMARY KEY,
            CreateDate       date        ,
            FirstName        text,
            LastName         text,
            Email            text,
            PhoneNumber      text,
            Address          text,
            City             text,
            Country          text,
            DateOfBirth      date,
            IsActive         boolean,
            CustomerType     text,
            LastUpdateDate   timestamp,
            Notes            text
          );
        loadScript: |
          COPY {{ .Values.cassandra.keyspace }}.customer (
            CustomerId,CreateDate,FirstName,LastName,Email,PhoneNumber,
            Address,City,Country,DateOfBirth,IsActive,CustomerType,
            LastUpdateDate,Notes
          )
          FROM '{{ .Values.dataset.mountPath }}/customer.csv'
          WITH HEADER = TRUE;

      - name: customer_tran
        createScript: |
          CREATE TABLE IF NOT EXISTS {{ .Values.cassandra.keyspace }}.customer_tran (
            TransactionId    uuid        PRIMARY KEY,
            CustomerId       uuid,
            Amount           decimal,
            TransactionDate  timestamp
          );
        loadScript: |
          COPY {{ .Values.cassandra.keyspace }}.customer_tran (
            TransactionId,CustomerId,Amount,TransactionDate
          )
          FROM '{{ .Values.dataset.mountPath }}/customer_tran.csv'
          WITH HEADER = TRUE;
kafka:
  install: false
  installUI: true
  numMessages: 10000
  serviceName: "kafka-service"
  port: 9092
  image: "bitnami/kafka:3.9.0"
  users:
    test:
      username: "kafka"
      password: "kafka"
  init: true
minio:
  install: false
  serviceName: "minio-service"
  port: 9000   # Default MinIO port, update if necessary
  testBucketName: "testbucket"
  users:
    default:
      username: "minioadmin"
      password: "minioadmin"
  init:
    testdata:
      importFiles:
        - name: customer10k.csv
          bucket: |
            {{ .Values.minio.testBucketName }}
        - name: customer_tran100m.csv
          bucket: |
            {{ .Values.minio.testBucketName }}
superset:
    install: false
iceberg:
  install: false
  serviceName: "iceberg-service"
  port: 8181
  users:
    default:
      username: "iceberg"
      password: "test123"
  init:
    create: true
hudi:
  install: false